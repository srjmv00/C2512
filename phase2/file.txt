#include<iostream>
#include<vector>
#include<climits>
#include<string>
#include<thread>
#include<algorithm>
#include<unistd.h>
#include<cstring>
#include<sys/ipc.h>
#include<sys/msg.h>

using namespace std;

class Surgery {
private:
    string surgeryId;
    int Duration;

public:
    Surgery(string surgeryId, int Duration) : surgeryId(surgeryId), Duration(Duration) {}

    int getDuration() {
        return this->Duration;
    }
};

// Define the message buffer structure
struct msg_buffer {
    long msg_type;
    int data[5];
};

void findSum(int a[], int& sum) {
    for (int i = 0; i < 5; i++) {
        sum += a[i];
    }
}

void client(vector<Surgery>& vec, int msgid) {
    int size = vec.size();
    msg_buffer message;
    message.msg_type = 1;

    for (int i = 0; i < size; i++) {
        message.data[i] = vec[i].getDuration();
    }

    // Send the message
    msgsnd(msgid, &message, sizeof(message.data), 0);
    cout << "Client: Sent durations" << endl;

    sleep(2);

    // Receive the sum from the server
    int sum = 0;
    msgrcv(msgid, &message, sizeof(int), 2, 0);
    sum = message.data[0];

    cout << "Total sum: " << sum << endl;
}

void server(int msgid) {
    sleep(1);

    msg_buffer message;

    // Receive the message
    msgrcv(msgid, &message, sizeof(message.data), 1, 0);
    cout << "Server: Received durations" << endl;

    int sum = 0;
    findSum(message.data, sum);

    // Send the sum back to the client
    message.msg_type = 2;
    message.data[0] = sum;
    msgsnd(msgid, &message, sizeof(int), 0);
    cout << "Sum sent: " << sum << endl;
}

int main() {
    vector<Surgery> vec;
    vec.emplace_back("am1", 2);
    vec.emplace_back("am2", 5);
    vec.emplace_back("am3", 6);
    vec.emplace_back("am4", 3);
    vec.emplace_back("am5", 1);

    // Create a message queue
    key_t key = ftok("progfile", 65);
    int msgid = msgget(key, 0666 | IPC_CREAT);

    pid_t pid = fork();

    if (pid == 0) {
        // Child process for the client
        client(vec, msgid);
        exit(0);
    } else {
        // Parent process for the server
        server(msgid);
    }

    // Wait for both processes to finish
    wait(NULL);

    // Destroy the message queue
    msgctl(msgid, IPC_RMID, NULL);

    return 0;
}
